---
import { getCollection } from 'astro:content';

const allDocs = await getCollection('docs');

// Group by category
const categories = {
  'getting-started': {
    title: 'Getting Started',
    docs: allDocs
      .filter((doc) => doc.data.category === 'getting-started')
      .sort((a, b) => (a.data.order || 0) - (b.data.order || 0)),
  },
  'cli': {
    title: 'CLI',
    docs: allDocs
      .filter((doc) => doc.data.category === 'cli')
      .sort((a, b) => (a.data.order || 0) - (b.data.order || 0)),
  },
  'core-concepts': {
    title: 'Core Concepts',
    docs: allDocs
      .filter((doc) => doc.data.category === 'core-concepts')
      .sort((a, b) => (a.data.order || 0) - (b.data.order || 0)),
  },
  'agents': {
    title: 'Agents',
    docs: allDocs
      .filter((doc) => doc.data.category === 'agents')
      .sort((a, b) => (a.data.order || 0) - (b.data.order || 0)),
  },
  'commands': {
    title: 'Commands',
    docs: allDocs
      .filter((doc) => doc.data.category === 'commands')
      .sort((a, b) => (a.data.order || 0) - (b.data.order || 0)),
  },
  'skills': {
    title: 'Skills',
    docs: allDocs
      .filter((doc) => doc.data.category === 'skills')
      .sort((a, b) => (a.data.order || 0) - (b.data.order || 0)),
  },
  'use-cases': {
    title: 'Use Cases',
    docs: allDocs
      .filter((doc) => doc.data.category === 'use-cases')
      .sort((a, b) => (a.data.order || 0) - (b.data.order || 0)),
  },
};

const currentPath = Astro.url.pathname;
---

<nav class="sidebar-nav">
  {
    Object.entries(categories).map(([key, category]) => (
      <div class="nav-section">
        <button class="nav-section-title">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="chevron"
          >
            <path d="m9 18 6-6-6-6"></path>
          </svg>
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="folder-icon"
          >
            <path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path>
          </svg>
          <span>{category.title}</span>
        </button>

        {category.docs.length > 0 && (
          <ul class="nav-items">
            {category.docs.map((doc) => (
              <li>
                <a
                  href={`/docs/${doc.slug}`}
                  class:list={['nav-item', { active: currentPath === `/docs/${doc.slug}` }]}
                >
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="file-icon"
                  >
                    <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path>
                    <path d="M14 2v4a2 2 0 0 0 2 2h4"></path>
                  </svg>
                  <span>{doc.data.title}</span>
                </a>
              </li>
            ))}
          </ul>
        )}
      </div>
    ))
  }
</nav>

<script>
  // Collapsible navigation sections
  document.addEventListener('DOMContentLoaded', () => {
    const sectionTitles = document.querySelectorAll('.nav-section-title');

    sectionTitles.forEach((title) => {
      title.addEventListener('click', () => {
        const section = title.closest('.nav-section');
        section?.classList.toggle('collapsed');
      });
    });
  });
</script>

<style>
  /* Sidebar Navigation (Polar v1.1) */
  .sidebar-nav {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
  }

  .nav-section {
    display: flex;
    flex-direction: column;
  }

  /* Section Header (Polar v1.1: 12px uppercase, letter-spacing 0.05em) */
  .nav-section-title {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-3);
    background: transparent;
    border: none;
    color: var(--color-text-secondary);
    font-size: var(--text-xs);
    font-weight: var(--font-semibold);
    text-transform: uppercase;
    letter-spacing: var(--tracking-wider);
    cursor: pointer;
    border-radius: var(--radius-md);
    transition: all var(--duration-normal) var(--ease-out);
    margin-bottom: var(--space-1);
  }

  .nav-section-title:hover {
    background-color: var(--color-bg-tertiary);
    color: var(--color-text-primary);
  }

  .chevron {
    transition: transform var(--duration-normal) var(--ease-out);
    color: var(--color-text-muted);
    width: var(--icon-sm);
    height: var(--icon-sm);
  }

  .nav-section.collapsed .chevron {
    transform: rotate(0deg);
  }

  .nav-section:not(.collapsed) .chevron {
    transform: rotate(90deg);
  }

  .folder-icon {
    color: var(--color-accent-blue);
    width: var(--icon-sm);
    height: var(--icon-sm);
  }

  .nav-items {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 0;
    transition: all var(--duration-normal) var(--ease-out);
  }

  .nav-section.collapsed .nav-items {
    display: none;
  }

  /* Navigation Item (Polar v1.1: 14px font, active with 2px blue left border) */
  .nav-item {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-3);
    padding-left: calc(var(--space-3) + 32px);
    color: var(--color-text-secondary);
    font-size: var(--text-sm);
    text-decoration: none;
    border-radius: var(--radius-md);
    transition: all var(--duration-normal) var(--ease-out);
    position: relative;
  }

  .nav-item:hover {
    background: var(--color-bg-tertiary);
    color: var(--color-text-primary);
    text-decoration: none;
  }

  /* Active State (Polar v1.1: 2px blue left border) */
  .nav-item.active {
    color: var(--color-text-primary);
    background: var(--color-bg-tertiary);
    font-weight: var(--font-normal);
    border-left: 2px solid var(--color-accent-blue);
    padding-left: calc(var(--space-3) + 30px);
  }

  .file-icon {
    color: var(--color-text-muted);
    width: var(--icon-sm);
    height: var(--icon-sm);
    flex-shrink: 0;
  }

  .nav-item.active .file-icon {
    color: var(--color-accent-blue);
  }

  /* Nested navigation (Polar v1.1) */
  .nav-nested {
    margin-inline-start: var(--space-4);
    padding-inline-start: var(--space-3);
    border-inline-start: 1px solid var(--color-border);
  }

  /* External link indicator (Polar v1.1) */
  .nav-item[data-external]::after {
    content: 'â†—';
    margin-inline-start: auto;
    font-size: var(--text-xs);
    opacity: 0.5;
  }
</style>
